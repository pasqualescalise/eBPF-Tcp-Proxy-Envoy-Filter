#include "ebpf_tcp_proxy_xdp/ebpf/ebpf_tcp_proxy_xdp.skel.h"
#include "ebpf_tcp_proxy_xdp.h"

namespace Envoy {
namespace Extensions {
namespace NetworkFilters {
namespace TcpProxy {
namespace EbpfTcpProxy {
namespace EbpfTcpProxyXDP {

/**
 * Use the skeleton generated by bpftool to load eBPF programs
 */
class EbpfLoader {
public:
  static void loadeBPFPrograms(int interface_index,
                               int* connection_fingerprint_to_connection_fingerprint_map_fd);

  static void unloadeBPFPrograms(int interface_index);

private:
  // program indexes
  enum {
    PROG_XDP_REDIRECT_PACKET = 0,
    PROG_CLS_BLOCK_FINS,

    MAX_NUM_OF_PROGRAMS
  };

  struct ProgramDescription {
    char name[256];
    enum bpf_prog_type type;
    int map_prog_idx;
    struct bpf_program* prog;
  };

  // description of all the programs
  static constexpr const ProgramDescription progs[] = {
      {"xdp/redirect_packet", BPF_PROG_TYPE_XDP, PROG_XDP_REDIRECT_PACKET, NULL},
      {"cls/block_fins", BPF_PROG_TYPE_SCHED_CLS, PROG_CLS_BLOCK_FINS, NULL},
  };

  // even if multiple filters are configured, just load the programs once
  static bool ebpf_loaded;

  static void attachXDP(struct bpf_object_skeleton* skel, int interface_index);
  static void attachTC(struct bpf_object_skeleton* skel, int interface_index);

  static void detachXDP(int interface_index);
  static void detachTC(int interface_index);
};

/**
 * Throwed by the EbpfLoader methods
 */
class eBPFLoadException : public std::exception {
public:
  eBPFLoadException(std::string message_) : message(message_){};

  const char* what() const throw() { return message.c_str(); }

private:
  std::string message;
};

} // namespace EbpfTcpProxyXDP
} // namespace EbpfTcpProxy
} // namespace TcpProxy
} // namespace NetworkFilters
} // namespace Extensions
} // namespace Envoy
